import * as path from "path";
import * as fs from "fs-extra";
import { DocumentNode, Source, print } from "graphql";
import { GraphQLSource, RemoteTypeName } from "../types";
import {
  IDefaultFragmentsConfig,
  generateDefaultFragments,
} from "./generate-default-fragments";

/**
 * Utility function that tries to load fragments from given path
 * and generates default fragments when some of the fragments do not exist
 */
export async function readOrGenerateDefaultFragments(
  fragmentsDir: string,
  config: IDefaultFragmentsConfig
): Promise<Map<RemoteTypeName, GraphQLSource>> {
  const defaultFragments = generateDefaultFragments(config);
  const result = new Map<RemoteTypeName, GraphQLSource>();

  await fs.ensureDir(fragmentsDir);
  for (const [remoteTypeName, fragment] of defaultFragments) {
    const fileName = path.join(fragmentsDir, `${remoteTypeName}.graphql`);
    let source;
    try {
      source = new Source(fs.readFileSync(fileName).toString(), fileName);
    } catch (e) {
      fs.writeFileSync(fileName, fragment);
      source = new Source(fragment, fileName);
    }
    result.set(remoteTypeName, source);
  }

  return result;
}

/**
 * Write the given fragments into a file the can be consumed by gatsby.
 *
 * @param fileName the name of javascript file to write the fragments to. can also include a path
 * @param fragmentsDoc the compiled gatsby fragments
 */
export async function writeGatsbyFragments(
  fileName: string,
  fragmentsDoc: DocumentNode
) {
  await fs.ensureFile(fileName);

  const renderFragment = (def) => `
export const ${def.name.value} = graphql\`
  ${print(def)}
\``;

  const text = `/* eslint-disable */
/**
 * This file was generated by gatsby-graphql-toolkit.
 */
import { graphql } from "gatsby"
${fragmentsDoc.definitions.map(renderFragment).join(`\n\n`)}
`;

  await fs.writeFile(fileName, text);
}

export async function writeCompiledQueries(
  outputDir: string,
  compiledQueries: Map<RemoteTypeName, DocumentNode>
) {
  await fs.ensureDir(outputDir);
  for (const [remoteTypeName, document] of compiledQueries) {
    await fs.writeFile(
      outputDir + `/${remoteTypeName}.graphql`,
      print(document)
    );
  }
}
